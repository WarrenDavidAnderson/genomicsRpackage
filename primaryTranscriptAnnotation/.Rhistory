library(devtools)
library(roxygen2)
# create the package
package.name = "primaryTranscriptAnnotation"
create(package.name)
pwd
getwd()
dir = paste0("/media/wa3j/Seagate2/Documents/PRO/adipogenesis/package")
setwd(dir)
package.name = "primaryTranscriptAnnotation"
create(package.name)
# build package
setwd(paste0(dir,"/",package.name))
document()
document()
library(devtools)
library(roxygen2)
document()
library(primaryTranscriptAnnotation)
?get.largest.interval
devtools::document()
library(primaryTranscriptAnnotation)
head(remove.genes.ov)
head(fix.genes.ov)
library(primaryTranscriptAnnotation)
library(NMF)
library(dplyr)
library(bigWig)
library(pracma)
library(RColorBrewer)
setwd("/media/wa3j/Seagate2/Documents/PRO/adipogenesis/package/idtu_analysis")
# import data for first exons, annotate, and remove duplicate transcripts
fname = "gencode.mm10.firstExon.bed"
dat0 = read.table(fname,header=F,stringsAsFactors=F)
names(dat0) = c('chr', 'start', 'end', 'gene', 'xy', 'strand')
dat0 = unique(dat0)
gencode.firstExon = dat0
# save(gencode.firstExon, file="gencode.firstExon.RData")
# import data for all transcripts, annotate, and remove duplicate transcripts
fname = "gencode.mm10.transcript.bed"
dat0 = read.table(fname,header=F,stringsAsFactors=F)
names(dat0) = c('chr', 'start', 'end', 'gene', 'xy', 'strand')
dat0 = unique(dat0)
gencode.transcript = dat0
# save(gencode.transcript, file="gencode.transcript.RData")
# chromosome sizes
# wget http://hgdownload.cse.ucsc.edu/goldenPath/mm10/bigZips/mm10.chrom.sizes
chrom.sizes = read.table("mm10.chrom.sizes",stringsAsFactors=F,header=F)
names(chrom.sizes) = c("chr","size")
# save(chrom.sizes, file="chrom.sizes.RData")
plus.file = "preadip_plus_merged.bigWig"
minus.file = "preadip_minus_merged.bigWig"
bw.plus = load.bigWig(plus.file)
bw.minus = load.bigWig(minus.file)
# get intervals for furthest TSS and TTS +/- interval
largest.interval.bed = get.largest.interval(bed=gencode.transcript)
# get read counts and densities in annotated gene
transcript.reads = read.count.transcript(bed=gencode.transcript, bw.plus=bw.plus, bw.minus=bw.minus)
# evaluate count and density distributions
par(mfrow=c(1,2))
hist(log(transcript.reads$density), breaks=200, col="black",xlab="log read density",main="")
hist(log(transcript.reads$counts), breaks=200, col="black",xlab="log read count",main="")
# specify which genes to cut based on low expression, visualize cutoffs
den.cut = -6
cnt.cut = 3
ind.cut.den = which(log(transcript.reads$density) < den.cut)
ind.cut.cnt = which(log(transcript.reads$counts) < cnt.cut)
ind.cut = union(ind.cut.den, ind.cut.cnt)
# remove "unexpressed" genes
unexp = names(transcript.reads$counts)[ind.cut]
largest.interval.expr.bed = largest.interval.bed[!(largest.interval.bed$gene %in% unexp),]
bp.range = c(20,120)
cnt.thresh = 5
bed.out = largest.interval.expr.bed
bed.in = gencode.firstExon[gencode.firstExon$gene %in% bed.out$gene,]
TSS.gene = get.TSS(bed.in=bed.in, bed.out=bed.out,
bw.plus=bw.plus, bw.minus=bw.minus,
bp.range=bp.range, cnt.thresh=cnt.thresh)
TSS.gene = TSS.gene$bed
# identify duplicates
dups0 = get.dups(bed = TSS.gene)
head(dups0,20)
# filter for non-coding RNAs and re-identify duplicates
dups = dups0[-grep("RP",dups0$gene),]
dups = get.dups(bed = dups)
max(dups$cases) # 15 cases
head(dups)
head(remove.genes.id)
head(fix.genes.id)
# remove genes based on manual analysis
# note that genes from fix.genes.id will be addressed below
genes.remove1 = dups0$gene[grep("RP",dups0$gene)]
genes.remove1 = c(genes.remove1, remove.genes.id$remove)
genes.remove1 = c(genes.remove1, fix.genes.id$upstream)
genes.remove1 = c(genes.remove1, fix.genes.id$downstream)
TSS.gene.filtered1 = TSS.gene[!(TSS.gene$gene %in% genes.remove1),]
# verify the absence of identical coordinate overlaps (output NULL)
get.dups(bed = TSS.gene.filtered1)
# run overlap analysis
overlap.data = gene.overlaps( bed = TSS.gene.filtered1 )
has.start.inside = overlap.data$has.start.inside
is.a.start.inside = overlap.data$is.a.start.inside
dim(has.start.inside)
dim(is.a.start.inside)
head(has.start.inside)
head(is.a.start.inside)
head(overlap.data$cases)
length(unique(overlap.data$cases$gene))
overlap.genes = overlap.data$cases$gene %>% unique
length(grep("AC",overlap.genes)) # 11
length(grep("RP",overlap.genes)) # 172
length(grep("Gm",overlap.genes)) # 1
genes.remove2 = overlap.genes[grep("AC",overlap.genes)]
genes.remove2 = c(genes.remove2, overlap.genes[grep("RP",overlap.genes)])
genes.remove2 = c(genes.remove2, overlap.genes[grep("Gm",overlap.genes)])
genes.remove2
# identify genes with multiple starts inside (i.e., 'big' genes)
# set these genes for removal
mult.inside.starts = inside.starts(vec = is.a.start.inside$xy)
length(mult.inside.starts) # 63
genes.remove2 = c(genes.remove2, mult.inside.starts) %>% unique
length(genes.remove2)
# remove filtered genes and re-run overlap analysis
in.dat = TSS.gene.filtered1[!(TSS.gene.filtered1$gene %in% genes.remove2),]
overlap.data = gene.overlaps( bed = in.dat )
has.start.inside = overlap.data$has.start.inside
is.a.start.inside = overlap.data$is.a.start.inside
case.dat = overlap.data$cases
length(unique(case.dat$cases)) # 89
# remove filtered genes and re-run overlap analysis
in.dat = TSS.gene.filtered1[!(TSS.gene.filtered1$gene %in% genes.remove2),]
overlap.data = gene.overlaps( bed = in.dat )
has.start.inside = overlap.data$has.start.inside
is.a.start.inside = overlap.data$is.a.start.inside
case.dat = overlap.data$cases
length(unique(case.dat$cases)) # 89
head(remove.genes.ov)
dim(fix.genes.ov)
head(fix.genes.ov)
head(TSS.gene.filtered2)
genes.remove2 = c(genes.remove2, remove.genes.ov$remove)
genes.remove2 = c(genes.remove2, fix.genes.ov$upstream)
genes.remove2 = c(genes.remove2, fix.genes.ov$downstream)
TSS.gene.filtered2 = TSS.gene.filtered1[
!(TSS.gene.filtered1$gene %in% genes.remove2),]
overlap.data = gene.overlaps( bed = TSS.gene.filtered2 )
overlap.data$cases # NULL
?adjacent.gene.coords
adjacent.gene.coords
# get the coordinates for adjacent gene pairs
fix.genes = rbind(fix.genes.id, fix.genes.ov)
bp.bin = 5
knot.div = 40
shift.up = 100
delta.tss = 50
diff.tss = 1000
dist.from.start = 50
adjacent.coords = adjacent.gene.coords(fix.genes=fix.genes, bed.long=TSS.gene,
exon1=gencode.firstExon,
bw.plus=bw.plus, bw.minus=bw.minus,
knot.div=knot.div, bp.bin=bp.bin,
shift.up=shift.up, delta.tss=delta.tss,
dist.from.start=dist.from.start,
diff.tss=diff.tss, fname="adjacentSplines.pdf")
# visualize coordinates for a specific pair
adjacent.coords.plot(adjacent.coords=adjacent.coords,
pair=fix.genes[4,],
bw.plus=bw.plus,
bw.minus=bw.minus)
dev.off()
# visualize coordinates for a specific pair
adjacent.coords.plot(adjacent.coords=adjacent.coords,
pair=fix.genes[4,],
bw.plus=bw.plus,
bw.minus=bw.minus)
# aggregate downstream adjacent genes with main data
TSS.gene.filtered3 = rbind(TSS.gene.filtered2, adjacent.coords)
# get intervals for TTS evaluation
add.to.end = 100000
fraction.end = 0.2
dist.from.start = 50
bed.for.tts.eval = get.end.intervals(bed=TSS.gene.filtered3,
add.to.end=add.to.end,
fraction.end=fraction.end,
dist.from.start=dist.from.start)
# distribution of clip distances
hist(bed.for.tts.eval$xy,xlab="clip distance (bp)",main="")
100-50
head(inferred.coords$bed)
# plot didtribution of clip distances for genes with boundary TTSs
hist(frac.bound.clip$clip.tts,main="",xlab="bp clipped for boundry genes")
# check for the percentage of identified TTSs that match the search region boundry
TTS.boundary.match(coords=coords, bed.for.tts.eval=bed.for.tts.eval) # 0.2326671
# look at whether TTSs identified at the search boundry had clipped boundries
frac.bound.clip = TTS.boundry.clip(coords=coords, bed.for.tts.eval=bed.for.tts.eval)
frac.bound.clip$frac.clip # 0.9842229
frac.bound.clip$frac.noclip # 0.01577711
coords = inferred.coords$bed
# get metrics
minus.lowcount = length(inferred.coords$minus.lowcount) # 3
plus.lowcount = length(inferred.coords$plus.lowcount) # 0
minus.knotmod = length(inferred.coords$minus.knotmod) # 794
plus.knotmod = length(inferred.coords$plus.knotmod) # 824
TTS.boundary.match(coords=coords, bed.for.tts.eval=bed.for.tts.eval) # 0.2326671
# look at whether TTSs identified at the search boundry had clipped boundries
frac.bound.clip = TTS.boundry.clip(coords=coords, bed.for.tts.eval=bed.for.tts.eval)
frac.bound.clip$frac.clip # 0.9842229
frac.bound.clip$frac.noclip # 0.01577711
# plot didtribution of clip distances for genes with boundary TTSs
hist(frac.bound.clip$clip.tts,main="",xlab="bp clipped for boundry genes")
gene.end = bed.for.tts.eval
long.gene = largest.interval.bed
tts.plot(coords=coords, gene.end=gene.end, long.gene=long.gene,
gene = "Pparg", xper=0.1, yper=0.2,
bw.plus=bw.plus, bw.minus=bw.minus, bp.bin=5,
frac.min=frac.min, frac.max=frac.max,
add.to.end=add.to.end, tau.dist=tau.dist)
tau.dist = 50000
# plot new coord id
gene.end = bed.for.tts.eval
long.gene = largest.interval.bed
tts.plot(coords=coords, gene.end=gene.end, long.gene=long.gene,
gene = "Pparg", xper=0.1, yper=0.2,
bw.plus=bw.plus, bw.minus=bw.minus, bp.bin=5,
frac.min=frac.min, frac.max=frac.max,
add.to.end=add.to.end, tau.dist=tau.dist)
add.to.end = max(bed.for.tts.eval$xy)
knot.div = 40
pk.thresh = 0.05
bp.bin = 50
knot.thresh = 5
cnt.thresh = 5
tau.dist = 50000
frac.max = 1
frac.min = 0.3
gene.end = bed.for.tts.eval
long.gene = largest.interval.bed
tts.plot(coords=coords, gene.end=gene.end, long.gene=long.gene,
gene = "Pparg", xper=0.1, yper=0.2,
bw.plus=bw.plus, bw.minus=bw.minus, bp.bin=5,
frac.min=frac.min, frac.max=frac.max,
add.to.end=add.to.end, tau.dist=tau.dist)
gene.end = bed.for.tts.eval
long.gene = largest.interval.bed
tts.plot(coords=coords, gene.end=gene.end, long.gene=long.gene,
gene = "Pparg", xper=0.1, yper=0.2,
bw.plus=bw.plus, bw.minus=bw.minus, bp.bin=5,
frac.min=frac.min, frac.max=frac.max,
add.to.end=add.to.end, tau.dist=tau.dist)
gene.end.plot(bed=bed.for.tts.eval, gene="Pparg",
bw.plus=bw.plus, bw.minus=bw.minus,
bp.bin=bp.bin, add.to.end=add.to.end, knot.div=knot.div,
pk.thresh=pk.thresh, knot.thresh=knot.thresh,
cnt.thresh=cnt.thresh, tau.dist=tau.dist,
frac.max=frac.max, frac.min=frac.min)
# filter for chrom sizes - if any ends are greater than the species chromosome size,
# reduce the end to the size limit
# any negative starts will be set to 0
coords.filt = chrom.size.filter(coords=coords, chrom.sizes=chrom.sizes)
head(coords.filt$bed)
coords.filt$log
head(hmm.bed)
bed.tss.tts = coords.filt$bed
# directory for applying bed intersect from inside R
bed.bin = "/media/wa3j/Seagate2/Documents/software/bedtools2/bin/"
# write bed files
write.table(hmm.bed,"hmm.bed",sep="\t",quote=F,col.names=F,row.names=F)
write.table(bed.tss.tts,"ann.bed",sep="\t",quote=F,col.names=F,row.names=F)
# sort the bed files
command1=paste('sort -k1,1 -k2,2n', 'hmm.bed', '> hmm.sorted.bed')
command2=paste('sort -k1,1 -k2,2n', 'ann.bed', '> ann.sorted.bed')
system(command1)
system(command2)
# create the command string and call the command using system()
comm = paste0(bed.bin,"intersectBed -s -wao -a hmm.sorted.bed -b ",
"ann.sorted.bed > hmm_ann_intersect.bed")
system(comm)
# import intersect results
hmm.ann.overlap = read.table("hmm_ann_intersect.bed",header=F,stringsAsFactors=F)
names(hmm.ann.overlap) = c("hmm.chr", "hmm.start", "hmm.end",
"hmm.xy", "hmm.gene", "hmm.strand",
"ann.chr", "ann.start", "ann.end",
"ann.gene", "ann.xy", "ann.strand",
"overlap")
system("rm hmm_ann_intersect.bed hmm.sorted.bed ann.sorted.bed hmm.bed ann.bed")
tg.overlaps = tu.gene.overlaps(hmm.ann.overlap=hmm.ann.overlap)
tg.overlaps$n.tus # 90629
tg.overlaps$n.gene.overlap.tu # 12802
tg.overlaps$n.tu.no.gene.overlap # 86276
tg.overlaps$n.tu.overlap.gene # 4353
tg.overlaps$n.tu.overlap.single.genes # 2162
tg.overlaps$n.tu.overlap.multiple.genes # 2191
getwd()
devtools::document()
library(primaryTranscriptAnnotation)
devtools::document()
library(primaryTranscriptAnnotation)
?get.dups
devtools::document()
library(primaryTranscriptAnnotation)
?get.TTS
devtools::document()
devtools::document()
library(primaryTranscriptAnnotation)
head(inferred.coords$bed)
devtools::document()
library(primaryTranscriptAnnotation)
multi.overlap.assign
single.overlap.assign
devtools::document()
library(primaryTranscriptAnnotation)
multi.overlap.assign
single.overlap.assign
devtools::document()
library(primaryTranscriptAnnotation)
devtools::document()
library(primaryTranscriptAnnotation)
document()
library(devtools)
library(roxygen2)
devtools::document()
library(devtools)
library(roxygen2)
devtools::document()
library(primaryTranscriptAnnotation)
tss.eva;
tss.eval
eval.tss
document()
library(devtools)
library(roxygen2)
document()
library(primaryTranscriptAnnotation)
library(devtools)
library(roxygen2)
devtools::document()
library(primaryTranscriptAnnotation)
TSS.count.dist
eval.tss
TSS.count.dist
devtools::document()
library(primaryTranscriptAnnotation)
